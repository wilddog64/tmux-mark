#!/usr/bin/env bash

TEST_SESSION="test_tmux_mark"
TEST_TMUX_CONF="/tmp/tmux_mark_test.conf"
EMPTY_TMUX_CONF="/tmp/tmux_empty_test.conf"
PLUGIN_DIR="$(pwd)" # Dynamically determine the current directory
MARK_FILE="$HOME/.tmux-marks.json"
PASS_COUNT=0
FAIL_COUNT=0

pass() { echo "PASS: $1"; ((PASS_COUNT++)); }
fail() { echo "FAIL: $1"; ((FAIL_COUNT++)); }

# Step 1: Create temporary tmux configurations
echo "Creating temporary tmux configurations for testing..."

# Configuration with plugin loaded
cat > "$TEST_TMUX_CONF" <<EOL
run-shell "$PLUGIN_DIR/tmux-mark.tmux"

# Keybindings for testing
unbind m
unbind ]
unbind [
bind m switch-client -T mark-mode
bind ] switch-client -T jump-mode
bind [ switch-client -T jump-mode

# Jump to next/previous marks
bind ] run-shell "$PLUGIN_DIR/scripts/jump_next.sh"
bind [ run-shell "$PLUGIN_DIR/scripts/jump_prev.sh"

# Mark table (for marks a-z)
bind -T mark-mode a run-shell "$PLUGIN_DIR/scripts/add_mark.sh a"
bind -T mark-mode b run-shell "$PLUGIN_DIR/scripts/add_mark.sh b"
bind -T mark-mode c run-shell "$PLUGIN_DIR/scripts/add_mark.sh c"

# Jump table (for marks a-z)
bind -T jump-mode a run-shell "$PLUGIN_DIR/scripts/jump_to_mark.sh a"
bind -T jump-mode b run-shell "$PLUGIN_DIR/scripts/jump_to_mark.sh b"
bind -T jump-mode c run-shell "$PLUGIN_DIR/scripts/jump_to_mark.sh c"

# Exit mark/jump modes
bind -T mark-mode Escape switch-client -T root
bind -T jump-mode Escape switch-client -T root
EOL

# Empty configuration for Test 4
cat > "$EMPTY_TMUX_CONF" <<EOL
# Empty configuration - No plugin bindings
EOL

# Function to ensure a clean tmux session
clean_tmux() {
    tmux kill-session -t "$TEST_SESSION" 2>/dev/null
}

# Function to run expect tests
run_expect_test() {
    local test_name="$1"
    local expect_script="$2"

    echo "Running $test_name..."
    expect -c "$expect_script"
    if [ $? -eq 0 ]; then
        pass "$test_name"
    else
        fail "$test_name"
    fi
}

# Step 2: Test Cases

# Test 1: Set mark 'a' with m + a
clean_tmux
run_expect_test "Test 1: Set mark 'a'" "
    spawn tmux -f \"$TEST_TMUX_CONF\" new-session -d -s \"$TEST_SESSION\"
    set timeout 5
    send \"tmux copy-mode\\r\"
    sleep 1
    send \"tmux send-keys -t $TEST_SESSION m\\r\"
    sleep 1
    send \"tmux send-keys -t $TEST_SESSION a\\r\"
    sleep 1
    expect {
        \"Mark 'a' set*\" { exit 0 }
        timeout { exit 1 }
    }
"

# Test 2: Jump to mark 'a' with ]a
clean_tmux
run_expect_test "Test 2: Jump to mark 'a'" "
    spawn tmux -f \"$TEST_TMUX_CONF\" new-session -d -s \"$TEST_SESSION\"
    set timeout 5
    send \"tmux copy-mode\\r\"
    sleep 1
    send \"tmux send-keys -t $TEST_SESSION ]\\r\"
    sleep 1
    send \"tmux send-keys -t $TEST_SESSION a\\r\"
    sleep 1
    expect {
        \"Jumped to mark 'a'*\" { exit 0 }
        timeout { exit 1 }
    }
"

# Test 3: Sequential navigation - Jump to next mark
clean_tmux
run_expect_test "Test 3: Jump to next mark" "
    spawn tmux -f \"$TEST_TMUX_CONF\" new-session -d -s \"$TEST_SESSION\"
    set timeout 5
    send \"tmux copy-mode\\r\"
    sleep 1
    send \"tmux send-keys -t $TEST_SESSION m\\r\"
    sleep 1
    send \"tmux send-keys -t $TEST_SESSION a\\r\"
    sleep 1
    send \"tmux send-keys -t $TEST_SESSION ]\\r\"
    sleep 1
    expect {
        \"Jumped to mark 'a'*\" { exit 0 }
        timeout { exit 1 }
    }
"

# Test 4: Fail case - Adding marks without plugin
clean_tmux
run_expect_test "Test 4: Fail case - Adding marks without plugin" "
    spawn tmux -f \"$EMPTY_TMUX_CONF\" new-session -d -s \"$TEST_SESSION\"
    set timeout 5
    send \"tmux copy-mode\\r\"
    sleep 1
    send \"tmux send-keys -t $TEST_SESSION m\\r\"
    sleep 1
    send \"tmux send-keys -t $TEST_SESSION a\\r\"
    sleep 1
    expect {
        \"Mark 'a' set*\" { exit 1 }
        timeout { exit 0 }
    }
"

# Step 3: Cleanup
echo "Cleaning up test session and temporary configurations..."
clean_tmux
rm -f "$TEST_TMUX_CONF" "$EMPTY_TMUX_CONF" "$MARK_FILE"

# Step 4: Final Report
echo "---------------------------------------"
echo "Test Suite Completed."
echo "Passed: $PASS_COUNT"
echo "Failed: $FAIL_COUNT"
echo "---------------------------------------"

if [ $FAIL_COUNT -eq 0 ]; then
    echo "All tests passed successfully!"
    exit 0
else
    echo "$FAIL_COUNT test(s) failed."
    exit 1
fi
